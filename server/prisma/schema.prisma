// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователи
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  language     String   @default("RU")
  country      String
  role         String   @default("STUDENT")
  registeredAt DateTime @default(now())
  
  // Дополнительная информация
  university   String?
  faculty      String?
  year         String?
  plan         String   @default("FREEMIUM")
  phone        String?
  gender       String?
  
  // Связи
  reminders    Reminder[]
  chatMessages ChatMessage[]
  profile      Profile?
  supportTickets SupportTicket[]
  
  @@map("users")
}

// Профили пользователей
model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  avatar      String?
  bio         String?
  interests   String   // JSON string
  socialLinks String?  // JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

// Напоминания
model Reminder {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  dueDate     DateTime
  priority    String   @default("MEDIUM")
  status      String   @default("PENDING")
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reminders")
}

// Образовательные гайды
model Guide {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String
  category    String
  tags        String   // JSON string
  difficulty  String   @default("BEGINNER")
  language    String   @default("RU")
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Статистика
  views       Int      @default(0)
  likes       Int      @default(0)
  
  @@map("guides")
}

// Сообщения чата с AI
model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  content   String
  isUser    Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

// Обращения в поддержку
model SupportTicket {
  id          String            @id @default(cuid())
  userId      String?
  name        String
  email       String
  subject     String
  message     String
  status      String            @default("OPEN")
  priority    String            @default("MEDIUM")
  category    String            @default("GENERAL")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  user        User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  responses   SupportResponse[]
  
  @@map("support_tickets")
}

// Ответы на обращения в поддержку
model SupportResponse {
  id          String        @id @default(cuid())
  ticketId    String
  adminId     String?
  content     String
  isAdmin     Boolean       @default(false)
  createdAt   DateTime      @default(now())
  
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  admin       Admin?        @relation(fields: [adminId], references: [id], onDelete: SetNull)
  
  @@map("support_responses")
}

// Администраторы
model Admin {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        String   @default("ADMIN")
  permissions String   // JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  supportResponses SupportResponse[]
  
  @@map("admins")
} 